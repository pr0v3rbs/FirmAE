#!/bin/sh

FIRMAE_BOOT=true
FIRMAE_NET=true
FIRMAE_NVRAM=true
FIRMAE_KERNEL=true
FIRMAE_ETC=true

if (${FIRMAE_ETC}); then
  TIMEOUT=240
  CHECK_TIMEOUT=360
else
  TIMEOUT=60
  CHECK_TIMEOUT=60
fi

if [ -n "${FIRMAE_DOCKER-}" ]; then
    FIRMAE_DIR=/work/FirmAE
    PSQL_IP=host.docker.internal
else
    FIRMAE_DIR=$(pwd)
    PSQL_IP=127.0.0.1
fi

BINARIES=( "busybox" "console" "gdb" "gdbserver" "strace" "libnvram.so" "libnvram_ioctl.so" )

# specify full paths to other directories
BINARY_DIR=${FIRMAE_DIR}/binaries/
TARBALL_DIR=${FIRMAE_DIR}/images/
SCRATCH_DIR=${FIRMAE_DIR}/scratch
SCRIPT_DIR=${FIRMAE_DIR}/scripts/

# functions to safely compute other paths

check_arch () {
    ARCHS=("armel" "mipseb" "mipsel")

    if [ -z "${1}" ]; then
        return 0
    fi

    match=0
    for i in "${ARCHS[@]}"; do
        if [ "${1}" == "$i" ]; then
            match=1
        fi
    done

    if [ "${match}" -eq 0 ]; then
        return 0
    fi

    return 1
}

check_number () {
    if [ "${1}" -ge 0 ]; then
        return 1
    fi

    return 0
}

check_root () {
    if [ "${EUID}" -eq 0 ]; then
        return 1
    fi

    return 0
}

get_fs () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image.raw"
}

get_fs_mount () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "`get_scratch "${1}"`/image/"
}

get_kernel () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "${BINARY_DIR}/zImage.${1}"
            ;;
        mipseb)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        mipsel)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_boot_kernel () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "${BINARY_DIR}/vmlinux.${1}"
            ;;
        mipseb)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        mipsel)
            if (${FIRMAE_KERNEL}); then
              echo "${BINARY_DIR}/vmlinux.${1}.4"
            else
              echo "${BINARY_DIR}/vmlinux.${1}.2"
            fi
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_binary () {
    if check_arch "${2}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    echo "${BINARY_DIR}/${1}.${2}"
}

get_qemu () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "qemu-system-arm"
            ;;
        mipseb)
            echo "qemu-system-mips"
            ;;
        mipsel)
            echo "qemu-system-mipsel"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_disk () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "/dev/vda1"
            ;;
        mipseb)
            echo "/dev/sda1"
            ;;
        mipsel)
            echo "/dev/sda1"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_qemu_machine () {
    if check_arch "${1}"; then
        echo "Error: Invalid architecture!"
        exit 1
    fi

    case "${1}" in
        armel)
            echo "virt"
            ;;
        mipseb)
            echo "malta"
            ;;
        mipsel)
            echo "malta"
            ;;
        *)
            echo "Error: Invalid architecture!"
            exit 1
    esac
}

get_scratch () {
    if check_number "${1}"; then
        echo "Error: Invalid image number!"
        exit 1
    fi

    echo "${SCRATCH_DIR}/${IID}"
}

check_network () {
    sleep 10

    IPS=("${@}")
    DEBUG_MODE=${IPS[-1]}
    unset 'IPS[${#IPS[@]}-1]'

    PING_RESULT=false
    PING_TIME=-1
    WEB_RESULT=false
    WEB_TIME=-1
    RET_IP="None"

    START_TIME=$(date +%s | bc)
    CURRENT_TIME=$(date +%s | bc)
    t_start=$(date +%s.%N)
    while [ ${CURRENT_TIME} -le $[${START_TIME} + ${CHECK_TIMEOUT}] ]
    do
        for IP in "${IPS[@]}"
        do
            if (curl --max-time 2 --output /dev/null --silent http://${IP} || curl --max-time 2 --output /dev/null --silent https://${IP}); then
                t_end=$(date +%s.%N)
                if (! ${WEB_RESULT}); then
                    WEB_TIME=$(echo "$t_end - $t_start" | bc)
                fi
                if (! ${PING_RESULT}); then
                    PING_TIME=${WEB_TIME}
                fi
                PING_RESULT=true
                WEB_RESULT=true
                RET_IP=${IP}
            fi
            if (ping -c 1 ${IP} > /dev/null); then
                t_end=$(date +%s.%N)
                if (! ${PING_RESULT}); then
                    PING_TIME=$(echo "$t_end - $t_start" | bc)
                fi
                PING_RESULT=true
                RET_IP=${IP}
            fi
            sleep 1
            CURRENT_TIME=$(date +%s | bc)
        done

        if (${WEB_RESULT}); then
            break
        fi
    done

    echo "${RET_IP}" "${PING_RESULT}" "${WEB_RESULT}" "${PING_TIME}" "${WEB_TIME}"
}

get_device () {
    echo '/dev/mapper/'`ls -t /dev/mapper | head -1`
}

add_partition () {
    local IFS=$'\n'
    local IMAGE_PATH
    local DEV_PATH=""
    local FOUND=false

    losetup -Pf ${1}
    while (! ${FOUND})
    do
        sleep 1
        for LINE in `losetup`
        do
            IMAGE_PATH=`echo ${LINE} | awk '{print $6}'`
            if [ "${IMAGE_PATH}" = "${1}" ]; then
                DEV_PATH=`echo ${LINE} | awk '{print $1}'`p1
                if [ -e ${DEV_PATH} ]; then
                    FOUND=true
                fi
            fi
        done
    done

    while (! ls -al ${DEV_PATH} | grep -q "disk")
    do
        sleep 1
    done
    echo ${DEV_PATH}
}

del_partition () {
    losetup -d ${1} &> /dev/null || true
    dmsetup remove $(basename ${1}) &>/dev/null || true
    sleep 1
}
